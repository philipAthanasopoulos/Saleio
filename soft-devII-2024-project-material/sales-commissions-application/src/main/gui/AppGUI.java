package main.gui;

import main.domain.*;
import main.parser.*;
import main.reporter.*;
import main.converter.*;

import java.util.List;
import java.util.ArrayList;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListModel;

import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Graphics;

/**
 * The App class is the main class of the application. It is responsible for
 * creating the GUI and handling the user's input.
 * @important The GUI is currently made with WindowBuilder extension for Eclipse.
 * Because of this, the code has autogenerated parts and some names are not
 * very descriptive. Make sure to change them when make changes to the GUI.
*/
public class AppGUI extends JFrame {
	private static final long serialVersionUID = 1L;
	private final JPanel contentPane;
	private final String applicationName = "Sales Commissions Application";
	private final List<Associate> associates;
	private final JList<String> associatesList = new JList<String>(); // change name
	private final JFileChooser fileChooser;
	private final JLabel associateFileLabel;
	private final JTextPane associateFileTextPane;
	private AssociateSalesPanel associateSalesPanel;
	private final JButton importFileButton;
	private final JButton addReceiptButton;
	private final JButton generateReportButton;
	private final GradientPanel gradientPanel;
	private final GradientPanel sidePanel;
	private final JPanel actionsButtonsPanel;
	private final JScrollPane associateFileScrollPane;
	private final JLabel associateListLabel;
	private final JLabel appTitleLabel;
	private final JScrollPane associatesScrollPane;
	private final JButton displayRawFileButton;
	private final JButton displayFormatedFileButton;
	DefaultListModel<String> listModel = new DefaultListModel<>();
	private JButton convertFileButton;

	public void runApp() {
		EventQueue.invokeLater(() -> {
			try {
				AppGUI frame = new AppGUI();
				frame.setTitle(frame.applicationName);
				frame.setVisible(true);
			} catch (Exception e) {
				System.out.println("Error running application");
			}
		});
	}
	
	/**
	 * Create the frame.
	 */
	public AppGUI() {
        associates = new ArrayList<>();
		associatesList.setFocusable(false);
		associatesList.setCellRenderer(new CellRenderer());
		fileChooser = new JFileChooser();
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			SwingUtilities.updateComponentTreeUI(fileChooser);
		} catch (Exception fileChooserException) {
			System.out.println("Error setting look and feel for file chooser");
		}
		
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setExtendedState(JFrame.MAXIMIZED_BOTH);
		setBounds(0, 0, 1920, 1080);
		contentPane = new JPanel();
		contentPane.setFocusable(false);
		contentPane.setFocusTraversalKeysEnabled(false);
		contentPane.setForeground(new Color(255, 255, 255));
		contentPane.setBackground(new Color(255, 255, 255));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setBounds(0, 0, getWidth(), getHeight());

		setContentPane(contentPane);
		contentPane.setLayout(null);
				
		
		
		associateFileScrollPane = new JScrollPane();
		associateFileScrollPane.setBounds(1394, 208, 510, 794);
		contentPane.add(associateFileScrollPane);
		
		associateFileTextPane = new JTextPane();
		associateFileTextPane.setFont(new Font("Tahoma", Font.PLAIN, 20));
		associateFileTextPane.setEditable(false);
		associateFileScrollPane.setViewportView(associateFileTextPane);
		associateFileTextPane.setCaretPosition(0);
		
		associateListLabel = new JLabel("Associates");
		associateListLabel.setIconTextGap(10);
		associateListLabel.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-admin-30.png")));
		associateListLabel.setFont(new Font("SansSerif", Font.PLAIN, 20));
		associateListLabel.setBounds(450, 157, 148, 44);
		contentPane.add(associateListLabel);
		
		associateFileLabel = new JLabel("No file to show");
		associateFileLabel.setIconTextGap(0);
		associateFileLabel.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-file-35.png")));
		associateFileLabel.setFont(new Font("SansSerif", Font.PLAIN, 20));
		associateFileLabel.setBounds(1584, 157, 320, 44);
		contentPane.add(associateFileLabel);	
		
		sidePanel = new GradientPanel();
		sidePanel.setBounds(0, 0, 322, getHeight());
		contentPane.add(sidePanel);
		sidePanel.setLayout(null);
				
		actionsButtonsPanel = new JPanel();
		actionsButtonsPanel.setOpaque(false);
		actionsButtonsPanel.setBounds(0, 278, 322, 267);
		sidePanel.add(actionsButtonsPanel);
		actionsButtonsPanel.setLayout(new GridLayout(0, 1, 0, 0));

				
		importFileButton = new JButton("Import file");
		importFileButton.setDebugGraphicsOptions(DebugGraphics.NONE_OPTION);
		importFileButton.setFocusable(false);
		importFileButton.setFocusPainted(false);
		importFileButton.setFocusTraversalKeysEnabled(false);
		importFileButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		importFileButton.setIconTextGap(10);
		importFileButton.setHorizontalTextPosition(SwingConstants.LEFT);
		importFileButton.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-add-file-30.png")));
		importFileButton.addActionListener((e) -> {
			if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
				File selectedFile = fileChooser.getSelectedFile();
				String fileExtension = getFileExtension(selectedFile);
				System.out.println("Tried to import :" + fileExtension);
				ParserFactory parserFactory = new ParserFactory();
				Parser parser = parserFactory.getParser(fileExtension);
				try {
					Associate newAssociate = parser.parseAssociateFromFile(selectedFile);
					associates.add(newAssociate);
					listModel.addElement(newAssociate.getName());
				} catch (NumberFormatException wrongNumberFormat) {
					JOptionPane.showMessageDialog(null, "Some numerical values may be words", "Error", JOptionPane.ERROR_MESSAGE);
					wrongNumberFormat.printStackTrace();
				} catch (IOException ioException) {
					JOptionPane.showMessageDialog(null, "File not found", "Error", JOptionPane.ERROR_MESSAGE);
				} catch (Exception exception) {
					JOptionPane.showMessageDialog(null, "File not supported", "Error", JOptionPane.ERROR_MESSAGE);
					exception.printStackTrace();
				}
			}
		});

		importFileButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		importFileButton.setBorder(null);
		importFileButton.setForeground(new Color(255, 255, 255));
		importFileButton.setBackground(new Color(0, 128, 128));
		importFileButton.setOpaque(false);
		actionsButtonsPanel.add(importFileButton);
		
		addReceiptButton = new JButton("Add receipt");
		addReceiptButton.setFocusable(false);
		addReceiptButton.setFocusTraversalKeysEnabled(false);
		addReceiptButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		addReceiptButton.setIconTextGap(10);
		addReceiptButton.setHorizontalTextPosition(SwingConstants.LEFT);
		addReceiptButton.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-add-receipt-30.png")));
		addReceiptButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		addReceiptButton.setBorder(null);
		addReceiptButton.setForeground(new Color(255, 255, 255));
		addReceiptButton.setBackground(new Color(0, 128, 128));
		addReceiptButton.setOpaque(false);
		addReceiptButton.addActionListener((e) -> {
			ReceiptForm receiptForm = new ReceiptForm(getSelectedAssociate());
			receiptForm.setLocationRelativeTo(null);
			receiptForm.setVisible(true);
			System.out.println("receipt form opened");
			//if receipt form is disposed, update the associate sales panel
			receiptForm.addWindowListener(new java.awt.event.WindowAdapter() {
			    @Override
			    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
			    	associateSalesPanel.setAssociate(getSelectedAssociate());
					displayFormatedFileButton.doClick(0);
			    }
			});
		});
		actionsButtonsPanel.add(addReceiptButton);
		
		generateReportButton = new JButton("Generate report");
		
		generateReportButton.setFocusable(false);
		generateReportButton.setFocusTraversalKeysEnabled(false);
		generateReportButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		generateReportButton.setIconTextGap(10);
		generateReportButton.setHorizontalTextPosition(SwingConstants.LEFT);
		generateReportButton.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-download-pie-chart-report-35.png")));
		generateReportButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		generateReportButton.setBorder(null);
		generateReportButton.setForeground(new Color(255, 255, 255));
		generateReportButton.setBackground(new Color(0, 128, 128));
		generateReportButton.setOpaque(false);
		generateReportButton.addActionListener((e) -> {
			//TODO : extract method
			FileType[] fileTypes = FileType.values();
			int choice = JOptionPane.showOptionDialog(null, "Choose file type", "Export as", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, fileTypes , null);
			ReporterFactory reporterFactory = new ReporterFactory();
			Reporter reporter = reporterFactory.getReporter(fileTypes[choice].name());
			try {
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setDialogTitle("Choose a directory to save your file: ");
				fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				int userSelection = fileChooser.showSaveDialog(null);

				if (userSelection == JFileChooser.APPROVE_OPTION) {
					File directory = fileChooser.getSelectedFile();
					reporter.generateReport(directory, getSelectedAssociate(),associateSalesPanel.getTableData());
					openFile(reporter.getReportFile());
				}
			} catch (Exception saveFileException) {
				JOptionPane.showMessageDialog(null, "Error saving file", "Error", JOptionPane.ERROR_MESSAGE);
				saveFileException.printStackTrace();
			}
		});
		
		actionsButtonsPanel.add(generateReportButton);
		
		convertFileButton = new JButton("Convert file");
		convertFileButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		convertFileButton.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-convert-35.png")));
		convertFileButton.setOpaque(false);
		convertFileButton.setIconTextGap(10);
		convertFileButton.setHorizontalTextPosition(SwingConstants.LEFT);
		convertFileButton.setForeground(Color.WHITE);
		convertFileButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		convertFileButton.setFocusable(false);
		convertFileButton.setFocusTraversalKeysEnabled(false);
		convertFileButton.setBorder(null);
		convertFileButton.setBackground(new Color(0, 128, 128));
		//TODO: convert file method should receive 2 arguments, file to convert and where to save it
		convertFileButton.addActionListener((e) -> {
			FileType[] fileTypes = FileType.values();
			int choice = JOptionPane.showOptionDialog(null, "Choose file type", "Export as", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, fileTypes , null);
			ConverterFactory converterFactory = new ConverterFactory();
			Converter converter = converterFactory.getConverter(fileTypes[choice].name());
			try {
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setDialogTitle("Choose a directory to save your file: ");
				fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				int userSelection = fileChooser.showSaveDialog(null);

				if (userSelection == JFileChooser.APPROVE_OPTION) {
					File directory = fileChooser.getSelectedFile();
					converter.convertFile(getSelectedAssociate(),directory);
					openFile(converter.getConvertedFile());
				}
			} catch (Exception saveFileException) {
				JOptionPane.showMessageDialog(null, "Error saving file", "Error", JOptionPane.ERROR_MESSAGE);
				saveFileException.printStackTrace();
			}
			
			
		});
		actionsButtonsPanel.add(convertFileButton);
		
		appTitleLabel = new JLabel("");
		appTitleLabel.setIconTextGap(0);
		appTitleLabel.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/Sale.io.png")));
		appTitleLabel.setForeground(new Color(255, 255, 255));
		appTitleLabel.setFont(new Font("SansSerif", Font.BOLD, 22));
		appTitleLabel.setBounds(0, 0, 322, 147);
		sidePanel.add(appTitleLabel);
		
		associatesScrollPane = new JScrollPane();
		associatesScrollPane.setBorder(null);
		associatesScrollPane.setBounds(346, 208, 369, 794);
		contentPane.add(associatesScrollPane);

        associatesList.setFont(new Font("Tahoma", Font.PLAIN, 18));
		associatesList.setModel(listModel);
		associatesList.addListSelectionListener((evt) -> {
					if (evt.getValueIsAdjusting()) return;
					associateFileTextPane.setText(getSelectedAssociate().getFormattedFile());
					associateFileLabel.setText(getSelectedAssociate().getPersonalFile().getName());
					associateSalesPanel.setAssociate(getSelectedAssociate());
					
					String fileExtension = getFileExtension(getSelectedAssociate().getPersonalFile());
					setDisplayedFileIcon(fileExtension);
		});
		
		associatesScrollPane.setViewportView(associatesList);
		
		associateSalesPanel = new AssociateSalesPanel();
		associateSalesPanel.setBounds(757, 208, 599, 794);
		contentPane.add(associateSalesPanel);
		
		displayRawFileButton = new JButton("Raw");
		displayRawFileButton.setFont(new Font("Tahoma", Font.PLAIN, 13));
		displayRawFileButton.setBounds(1394, 165, 69, 32);
		displayRawFileButton.addActionListener((e) -> {
			String rawFileContent;
			try {
				rawFileContent = getSelectedAssociate().getRawFile();
				associateFileTextPane.setText(rawFileContent);
			} catch (FileNotFoundException FileNotFoundException) {
				JOptionPane.showMessageDialog(null, "File not found", "Error", JOptionPane.ERROR_MESSAGE);
			} catch (IOException ioException) {
				JOptionPane.showMessageDialog(null, "Error reading file", "Error", JOptionPane.ERROR_MESSAGE);
			}
		});
		contentPane.add(displayRawFileButton);
		
		displayFormatedFileButton = new JButton("Format");
		displayFormatedFileButton.setFont(new Font("Tahoma", Font.PLAIN, 13));
		displayFormatedFileButton.setBounds(1465, 165, 88, 32);
		displayFormatedFileButton.addActionListener((e) -> {
			associateFileTextPane.setText(getSelectedAssociate().getFormattedFile());
		});
		contentPane.add(displayFormatedFileButton);
		
		gradientPanel = new GradientPanel();
		gradientPanel.setBounds(320, 0, 1602, 125);
		contentPane.add(gradientPanel);
		
		JLabel lblSalesAnalysis = new JLabel("Sales Analysis");
		lblSalesAnalysis.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-estimate-35.png")));
		lblSalesAnalysis.setIconTextGap(10);
		lblSalesAnalysis.setFont(new Font("SansSerif", Font.PLAIN, 20));
		lblSalesAnalysis.setBounds(955, 157, 211, 44);
		contentPane.add(lblSalesAnalysis);
	}
	
	public String getFileExtension(File file){
		String fileName = file.getName();
		int dotIndex = fileName.lastIndexOf('.');
		String result = (dotIndex == -1) ? "" : fileName.substring(dotIndex + 1);
		System.out.println(result);
		return result;
	}
	
	public Associate getSelectedAssociate(){
		Associate result = null;
		try {
			result = associates.get(associatesList.getSelectedIndex());
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "No associate selected.\nPlease select one , or import a new file first", "Error", JOptionPane.NO_OPTION);
		}
		return result;
	}
	
	private void setDisplayedFileIcon(String fileExtension) {
		switch(fileExtension){
			case "txt":
				associateFileLabel.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-txt-35.png")));
				break;
			case "xml":
				associateFileLabel.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-code-file-35.png")));
				break;
			case "html":
				associateFileLabel.setIcon(new ImageIcon(AppGUI.class.getResource("/resources/icons/icons8-html-35.png")));
			default:
				break;
		}
	}

	private void openFile(File file) {
		try {
			Desktop.getDesktop().open(file);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
